# -*- coding: utf-8 -*-
"""52100943_Lab8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oPOiIImOLYIo9etYEHFYTLtGnOR_NGcO

Exercise 1: Find the critical numbers (C.N) of f(x) for the following cases
"""

from sympy import *

x = symbols("x")

f1a = 3*x**4 - 16*x**3 + 18*x**2 - 9
df1a = diff(f1a,x,1)
criticalNums = solve(df1a,x)
print("a) Các điểm cực trị của hàm số là {}".format(criticalNums))

f1b = (x+2) / (2*x**2)
df1b = diff(f1b,x,1)
criticalNums = solve(df1b,x)
print("b) Các điểm cực trị của hàm số là {}".format(criticalNums))

f1c = -(x**2 / 3) + x**2 + 3*x + 4
df1c = diff(f1c,x,1)
criticalNums = solve(df1c,x)
print("c) Các điểm cực trị của hàm số là {}".format(criticalNums))

f1d = (5*x**2 + 5) / x 
df1d = diff(f1d,x,1)
criticalNums = solve(df1d,x)
print("d) Các điểm cực trị của hàm số là {}".format(criticalNums))

"""Exercise 2: Find the relative extrema using the second derivative test for the following cases"""

from sympy import *

def relativeExtrema(f):
  f_x = lambdify(x,f)
  df = diff(f,x,1)
  criticalNums = solve(df,x)
  sec_df = diff(f,x,2)
  sec_df_x = lambdify(x, sec_df)
  for x0 in criticalNums:
    if(sec_df_x(x0) > 0):
      print("Relative minimum = {} at x = {}".format(f_x(x0), x0))
    elif(sec_df_x(x0) < 0):
      print("Relative maximum = {} at x = {}".format(f_x(x0), x0))
    else:
      print("Fail")

print("a)")
f2a = 3*x**4 - 16*x**3 + 18*x**2 - 9
relativeExtrema(f2a)

print()

print("b)")
f2b = (x+2) / (2*x**2)
relativeExtrema(f2b)

print()

print("c)")
f2c = -(x**2 / 3) + x**2 + 3*x + 4
relativeExtrema(f2c)

print()

print("d)")
f2d = (5*x**2 + 5) / x 
relativeExtrema(f2d)

"""Exercise 3: Given f(x) over a closed interval [a, b], find the absolute maximum and the absolute minimum for the following cases"""

from sympy import *
import numpy as np

x = symbols("x")

def absolute_max_min(f, start, end):

  interval = np.arange(start, end + 1, 1)

  f_x = lambdify(x, f)
  df = diff(f,x,1)

  criticalNums = solve(df,x)

  root = [start,end]

  for x_c in criticalNums:
    if(x_c >= start and x_c <= end):
        root.append(x_c)

  root.sort()

  max = f_x(start)
  for x0 in root:
    if(f_x(x0) > max):
      max = f_x(x0)

  min = f_x(start)
  for x0 in root:
    if(f_x(x0) < min):
      min = f_x(x0)

  print("The absolute maximum = {}".format(max))
  print("The absolute minimum = {}".format(min))

print("a)")
absolute_max_min(x**3 - 27*x,0,5)

print()

print("b)")
absolute_max_min((3/2) * x**4 - 4*x**3 + 4,0,3)

print()

print("c)")
absolute_max_min((1/2) * x**4 - 4*x**2 + 5,1,3)

print()

print("d)")
f3d = (5/2) * x**4 - (20/3)*x**3 + 6
absolute_max_min((5/2) * x**4 - (20/3)*x**3 + 6,-1,3)

"""Exercise 4: Determine the minima or maxima of the functions f(x) following"""

from sympy import *
import numpy as np
import math
from matplotlib import pyplot as plt

x = symbols("x")

def minima_maxima(f, start, end):
  f_x = lambdify(x,f)
  df = diff(f,x,1)

  interval = np.arange(start, end + 1, 1)

  criticalNums = solve(df,x)

  root = []

  for x_c in criticalNums:
    for x_i in interval:
      if x_c == x_i:
        root.append(x_c)

  if(root == []):
    print("Hàm số không có điểm cục đại và cực tiểu")

  sec_df = diff(f,x,2)
  sec_df_x = lambdify(x, sec_df)

  for x0 in root:
    if(sec_df_x(x0) > 0):
      print("Cực đại của hs là = {} tại điểm x = {}".format(f_x(x0), x0))
    elif(sec_df_x(x0) < 0):
      print("Cực tiểu của hs là = {} tại điểm x = {}".format(f_x(x0), x0))

def plot(f,start,end,jump):
  value = np.arange(start,end+1,jump)
  f_x = lambdify(x,f)(value)
  plt.plot(value,f_x)
  plt.show()

print("a)")
f2a = x**2 - 2*x - 5
minima_maxima(f2a, 0, 2)
plot(f2a,0,2,0.1)

print()

print("b)")
f2b = 3*x + x**3 + 5
minima_maxima(f2b, -4, 4)
plot(f2b,-4,4,0.1)

print()

# Error
"""
print("c)")
f2c = sin(x) + 3*x**2
minima_maxima(f2c, -2, 2)
"""

print()

print("d)")
f2d = math.e**(x**2) + 3*x
minima_maxima(f2d, -1, 1)
plot(f2d,-1,1,0.1)

print()

print("e)")
f2e = x**3 - 3*x
minima_maxima(f2e, -3, 0)
plot(f2e,-3,0,0.1)

print()

print("f)")
f2f = x**3 - 3*x
minima_maxima(f2f, 0, 3)
plot(f2f,0,3,0.1)

print()

print("g)")
f2g = sin(x)
minima_maxima(f2g, 0, math.pi)
plot(f2g,0,math.pi,math.pi/12)

print()

print("h)")
f2h = sin(2*x)
minima_maxima(f2h, 0, 2)
plot(f2h,0,2,0.1)

print()

print("i)")
f2i = cos(x)
minima_maxima(f2i, math.pi/2, 3 * math.pi/2)
plot(f2i,math.pi/2,3 * math.pi/2,math.pi/12)

print()

print("j)")
f2j = tan(x)**2
minima_maxima(f2j, -math.pi / 4, math.pi / 4)
plot(f2j,-math.pi / 4,math.pi / 4,math.pi/12)

print()

print("k)")
f2k = math.e**x * sin(x)
minima_maxima(f2k, 0, math.pi)
plot(f2k,0,math.pi,math.pi/12)

print()

print("l)")
f2l = x**4 - 3*x**2
minima_maxima(f2l, -4, 0)
plot(f2l,-4,0,0.1)

print()

print("m)")
f2m = x**3 - 3*x
minima_maxima(f2m, 0, 4)
plot(f2m,0,4,0.1)

print()

print("n)")
f2n = x**5 - 5*x**3
minima_maxima(f2n, -4, 0)
plot(f2n,-4,0,0.1)

print()

print("o)")
f2o = x**6 - 5*x**2
minima_maxima(f2o, -1, 1)
plot(f2o,-1,1,0.1)

print()

print("p)")
f2p = x**3 - 9*x
minima_maxima(f2p, -3, 0)
plot(f2p,-3,0,0.1)

print()

print("q)")
f2q = x**3 - 9*x
minima_maxima(f2q, 0, 3)
plot(f2q,0,3,0.1)

print()

print("r)")
f2r = x**3 + 9*x
minima_maxima(f2r, -1, 1)
plot(f2r,-1,1,0.1)

"""Exercise 7: Determine m to y = x**3 − 3*m*x**2 + 3(m**2 − 1)x − (m**2 − 1) maximize at x0 = 1"""

from sympy import *
import numpy as np

x = symbols('x')
m = symbols('m')

y = x**3 - 3*m*x**2 + 3*(m**2 - 1)*x - (m**2 - 1)

dy = diff(y,x)
dy_x = lambdify(x,dy)

root = solve(dy_x(1),m)

d2y = diff(dy,x)
d2y_x = lambdify((x,m),d2y)

for m0 in root:
  if(d2y_x(1,m0) == 0):
    print("Không tồn tại m để hs đạt cực đại tại x = 1")
  elif d2y_x(1,m0) < 0:
    print("Hs đạt cực đại tại x = 1 với m = {}".format(m0))

"""Exercise 8: Optimization for f(x) functions and plot on the graphs."""

from sympy import *
import numpy as np

x = symbols('x')

def absolute_max_min(f, start, end):

  interval = np.arange(start, end + 1, 1)

  f_x = lambdify(x, f)
  df = diff(f,x,1)

  criticalNums = solve(df,x)

  root = [start,end]

  for x_c in criticalNums:
    if(x_c >= start and x_c <= end):
        root.append(x_c)

  root.sort()

  max = f_x(start)
  for x0 in root:
    if(f_x(x0) > max):
      max = f_x(x0)

  min = f_x(start)
  for x0 in root:
    if(f_x(x0) < min):
      min = f_x(x0)

  print("The absolute maximum = {}".format(max))
  print("The absolute minimum = {}".format(min))

  print()

def plot(f,start,end,jump):
  value = np.arange(start,end+1,jump)
  f_x = lambdify(x,f)(value)
  plt.plot(value,f_x)
  plt.show()

  print()


print("a)")
f8a = -2*x**2 + x + 4
absolute_max_min(f8a,-5,5)
plot(f8a,-5,5,0.5)

print("b)")
f8b = -4*x**2 + 2*x + 2
absolute_max_min(f8b,-6,6)
plot(f8b,-6,6,0.5)

print("c)")
f8c = x**3 + 6*x**2 + 5*x - 12
absolute_max_min(f8c,-5,-2)
plot(f8c,-5,-2,1)

print("d)")
f8d = 2*x - x**2 
absolute_max_min(f8d,0,3)
plot(f8d,0,3,0.1)

print("e)")
f8e = x**2 - x - 10
absolute_max_min(f8e,-10,10)
plot(f8e,-10,10,1)

print("f)")
f8f = -(x+6)**2 + 4
absolute_max_min(f8f,-10,10)
plot(f8f,-10,10,1)

print("g)")
f8g = -2*x**2 + 3*x + 6
absolute_max_min(f8g,-3,5)
plot(f8g,-3,5,0.5)