# -*- coding: utf-8 -*-
"""52100943_Lab7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgekrnWGKxSzWgg1D-EMnLcWyjWcCx8J

Exercise 4: Find all the second-order partial derivatives of the function f(x; y). Then plot the function f(x; y) and the second order partial derivative of f(x; y) with regard to x, and y, respectively
"""

from sympy import *
import numpy as np
import math
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pyplot as plt

x, y = symbols("x, y")

def derivative_f_x_y(f):
  print("The second-order of x partial derivatives of the function f(x, y) = {}".format(diff(f,x,2)))
  print("The second-order of y partial derivatives of the function f(x, y) = {}".format(diff(f,y,2))) 

print("a)")
f4a = x + y + x*y
derivative_f_x_y(f4a)

print()

print("b)")
f4b = sin(x*y)
derivative_f_x_y(f4b)

print()

print("c)")
f4c = x**2*y + cos(y) + y*sin(x)
derivative_f_x_y(f4c)

print()

print("d)")
f4d = x * math.e**y + y + 1
derivative_f_x_y(f4d)

print()

print("e)")
f4e = log(x+y)
derivative_f_x_y(f4e)

print()

print("f)")
f4f = 1 / tan(y / x)
derivative_f_x_y(f4f)

print()

print("g)")
f4g = x**2 * tan(x*y)
derivative_f_x_y(f4g)

print()

print("h)")
f4h = y * math.e**(x**2 - y)
derivative_f_x_y(f4h)

print()

print("i)")
f4i = x * sin(x**2 * y)
derivative_f_x_y(f4i)

print()

print("j)")
f4j = (x-y) / (x**2 + y)
derivative_f_x_y(f4j)

print()

# Plot

x_a = np.linspace(-10,10,9)
y_a = np.linspace(-10,10,9)

X_a, Y_a = np.meshgrid(x_a,y_a)

f4a = X_a + Y_a + X_a*Y_a

df4a_x_2 = 0
df4a_y_2 = 0

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_a, Y_a, f4a)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("a) ")
plt.show()

print()

# Error
"""
x_b = np.linspace(-10,10,9)
y_b = np.linspace(-10,10,9)

X_b, Y_b = np.meshgrid(x_b,y_b)

f4b = sin(X_b*Y_b)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_b, Y_b, f4b)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("b) ")
plt.show()
"""
print()

# Error
"""
x_c = np.linspace(-10,10,9)
y_c = np.linspace(-10,10,9)

X_c, Y_c = np.meshgrid(x_c,y_c)

f4c = X_c**2*Y_c + cos(Y_c) + Y_c*sin(X_c)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_c, Y_c, f4c)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("c) ")
plt.show()
"""

print()

x_d = np.linspace(-10,10,9)
y_d = np.linspace(-10,10,9)

X_d, Y_d = np.meshgrid(x_d,y_d)

f4d = X_d * math.e**Y_d + Y_d + 1

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_d, Y_d, f4d)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("d) ")
plt.show()

print()

# Error
"""
x_e = np.linspace(-10,10,9)
y_e = np.linspace(-10,10,9)

X_e, Y_e = np.meshgrid(x_e,y_e)

f4e = log(X_e+Y_e)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_e, Y_e, f4e)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("e) ")
plt.show()
"""

print()

# Error
"""
x_f = np.linspace(-10,10,9)
y_f = np.linspace(-10,10,9)

X_f, Y_f = np.meshgrid(x_f,y_f)

f4f = 1 / tan(Y_f / X_f)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_f, Y_f, f4f)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("f) ")
plt.show()
"""

print()

# Error 
"""
x_g = np.linspace(-10,10,9)
y_g = np.linspace(-10,10,9)

X_g, Y_g = np.meshgrid(x_g,y_g)

f4g = X_g**2 * tan(X_g*Y_g)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_g, Y_g, f4g)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("g) ")
plt.show()
"""

print()

x_h = np.linspace(-10,10,9)
y_h = np.linspace(-10,10,9)

X_h, Y_h = np.meshgrid(x_h,y_h)

f4h = Y_h * math.e**(X_h**2 - Y_h)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_h, Y_h, f4h)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("h) ")
plt.show()

print()

# Error
"""
x_i = np.linspace(-10,10,9)
y_i = np.linspace(-10,10,9)

X_i, Y_i = np.meshgrid(x_i,y_i)

f4i = X_i * sin(X_i**2 * Y_i)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_i, Y_i, f4i)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("i) ")
plt.show()
"""

print()

x_j = np.linspace(1,10,10)
y_j = np.linspace(1,10,10)

X_j, Y_j = np.meshgrid(x_j,y_j)

f4j = (X_j-Y_j) / (X_j**2 + Y_j)

fig = plt.figure() 
ax = Axes3D(fig) 

ax.plot_surface(X_j, Y_j, f4j)

plt.xlabel("x-axis")
plt.xlabel("y-axis")
plt.title("j) ")
plt.show()

"""Exercise 5: Verify that fxy = fyx or not."""

from sympy import * 

x = symbols('x')
y = symbols('y')

def fxy_equal_fyx(f):
  f_x_y = lambdify((x,y), f)
  if f_x_y(x,y) == f_x_y(y,x):
    print("f(x,y) = f(y,x)")
  else:
    print("f(x,y) != f(y,x)")

# Error
#f5a = x*sin(y) + y * sin(x) + x*y
#fxy_equal_fyx(f5a)

# Error
#f5b = log(2*x + 3*y)
#fxy_equal_fyx(f5b)

f5c = x*y**2 + x**2 * y**3 + x**3 * y**4
fxy_equal_fyx(f5c)

# Error
#f5d = math.e**x + x * .log(y) + y * math.log(x)
#fxy_equal_fyx(f5d)

"""Exercise 6: Find the fifth-order partial derivative  of the function following:"""

import sympy as sp
import numpy as np

x, y  = symbols("x, y")

f6a = y**2 * x**4 * np.e**x + 2
print("The fifth-order partial derivative of the function is {}".format(diff(diff(f6a,y,3),x,2)))

f6b = y**4 + y * (sin(x) - x**4)
print("The fifth-order partial derivative of the function is {}".format(diff(diff(f6b,y,3),x,2)))

f6c = x**5 + 5*x*y + sin(x) + 7*np.e**x
print("The fifth-order partial derivative of the function is {}".format(diff(diff(f6c,y,3),x,2)))

f6d = x * np.e**(y**4 / 2)
print("The fifth-order partial derivative of the function is {}".format(diff(diff(f6d,y,3),x,2)))

"""Exercise 7: Express dw/dt as a function of t, both by using the Chain Rule and by expressing w in terms of t and differentiating directly with respect to t. Then evaluate dw/dt at the given value of t."""

from sympy import *
import math

x = symbols('x')
y = symbols('y')
t = symbols('t')
z = symbols('z')

def ex7_2_var(w, f1, f2, a):  
  w_t = w.subs(x,f1).subs(y,f2)
  dw = diff(w_t,t,1) 
  dw_a = dw.subs(t,a) 
  print("Đạo hàm của w theo t là {}".format(dw))
  print("Result = {}".format(dw_a))

print("a)")
ex7_2_var(x**2 + y**2, cos(t), sin(t), math.pi)

print("b)")
ex7_2_var(x**2 + y**2, cos(t) + sin(t), cos(t) - sin(t), 0)

def ex7_3_var(w, f1, f2, f3, a):  
  w_t = w.subs(x,f1).subs(y,f2).subs(z,f3)
  dw = diff(w_t,t,1) 
  dw_a = dw.subs(t,a) 
  print("Đạo hàm của w theo t là {}".format(dw))
  print("Result = {}".format(dw_a))

print("c)")
ex7_3_var(x / z + y / z, cos(t)**2, sin(t)**2, 1/t, 3)

print("d)")
ex7_3_var(2*y*math.e**x - log(z), log(t**2 + 1), 1 / tan(t), math.e**t, 1)

print("e)")
ex7_3_var(z - sin(x*y), t, log(t), math.e**(t-1), 1)

"""Exercise 8: Use the limit definition of partial derivative to compute the partial derivatives of the functions at the specified points"""

from sympy import *

x = symbols('x')
y = symbols('y')
h = symbols('h')

def derivative_by_limit(f,x0,y0):
  f_x_y = lambdify((x,y), f)
  df_x = limit((f_x_y(x+h,y) - f_x_y(x,y)) / h, h, 0)
  df_y = limit((f_x_y(x,y+h) - f_x_y(x,y)) / h, h, 0)

  df_x = df_x.subs(x,x0).subs(y,y0)
  df_y = df_y.subs(x,x0).subs(y,y0)

  print("Đạo hàm hs theo x bằng định nghĩa và tính toán tại điểm ({},{}): {}".format(x0,y0,df_x))
  print("Đạo hàm hs theo y bằng định nghĩa và tính toán tại điểm ({},{}): {}".format(x0,y0,df_y))

print("a)")
f7a = 1 - x + y - 3*x**2*y
derivative_by_limit(f7a,1,2)

print()

print("b)")
f7b = 4 + 2*x - 3*y - 3*x*y**2
derivative_by_limit(f7b,-2,1)

"""Exercise 9: Let f(x, y) = x**2 - x*y + 1/2 * y**2 + 3. Find the slope of line tangent to this surface at the point (3, 2)"""

from sympy import *

x = symbols('x')
y = symbols('y')

f = x**2 - x*y + 0.5 * y**2 + 3
df_x = diff(f,x,1) 
df_y = diff(f,y,1) 

f_P = f.subs(x,3).subs(y,2)
df_x_P = df_x.subs(x,3).subs(y,2)
df_y_P = df_y.subs(x,3).subs(y,2)

print("Hệ số góc của tiếp tuyến của giao tuyến của đồ thị hàm số với mặt phẳng x = 3: {}".format(df_x_P))
print("Hệ số góc của tiếp tuyến của giao tuyến của đồ thị hàm số với mặt phẳng y = 2: {}".format(df_y_P))