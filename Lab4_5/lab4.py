# -*- coding: utf-8 -*-
"""Lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WEpPnEr2uVLA8IYZ1aMYhDFWbb6A-iqx

Exercise 1: Write a computer program to find the derivative of functions
"""

from sympy import * 
x = symbols('x')

f1a = 4 - x**2
df1a = f1a.diff(x)
print("a) f(x) = " + str(f1a) + "; D(f) = ",df1a)

f1b = (x-1)**2 + 1
df1b = f1b.diff(x)
print("b) f(x) = " + str(f1b) + "; D(f) = ",df1b)

f1c = 1 / x**2
df1c = f1c.diff(x)
print("c) f(x) = " + str(f1c) + "; D(f) = ",df1c)

f1d = (1-x) / (2*x)
df1d = f1d.diff(x)
print("d) f(x) = " + str(f1d) + "; D(f) = ",df1d)

f1e = sqrt(3*x)
df1e = f1e.diff(x)
print("e) f(x) = " + str(f1e) + "; D(f) = ",df1e)

f1f = sqrt(2*x + 1)
df1f = f1f.diff(x)
print("f) f(x) = " + str(f1f) + "; D(f) = ",df1f)

"""Exercise 2: Find the equation of the line tangent of 
the following functions, then draw the graph.
"""

from sympy import *
from matplotlib import pyplot as plt
import numpy as np

x = symbols('x')

f2a = x**2 + 1
x0a = 2
y0a = 5
m = diff(f2a,x,1).subs(x,x0a) # Tính hệ số góc tại điểm x0
f2a_tt = m*(x - x0a) + y0a # PTTT y = m(x - x0) + y0
print("a) PTTT của f(x) = " + str(f2a) + " tại điểm x0 = " + str(x0a) + " là: ",f2a_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1a = np.arange(0, 5, 0.05)
f2a_p = x1a**2 + 1 # p = plot
f2a_tt_p = m*(x1a - x0a) + y0a
plt.plot(x1a,f2a_p)
plt.plot(x1a,f2a_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Câu a")
plt.show()

f2b = x - 2*x**2
x0b = 1
y0b = -1
m = diff(f2b,x,1).subs(x,x0b) 
f2b_tt = m*(x - x0b) + y0b 
print("b) PTTT của f(x) = " + str(f2b) + " tại điểm x0 = " + str(x0b) + " là: ",f2b_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1b = np.arange(-1, 3, 0.05)
f2b_p = x1b - 2*x1b**2 
f2b_tt_p = m*(x1b - x0b) + y0b
plt.plot(x1b,f2b_p)
plt.plot(x1b,f2b_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Câu b")
plt.show()

f2c = x / (x-2)
x0c = 3
y0c = 3
m = diff(f2c,x,1).subs(x,x0c) # Tính hệ số góc tại điểm x0
f2c_tt = m*(x - x0c) + y0c # PTTT y = m(x - x0) + y0
print("c) PTTT của f(x) = " + str(f2c) + " tại điểm x0 = " + str(x0c) + " là: ",f2c_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1c = np.arange(2.05, 5, 0.05)
f2c_p = x1c / (x1c-2) # p = plot
f2c_tt_p = m*(x1c - x0c) + y0c
plt.plot(x1c,f2c_p)
plt.plot(x1c,f2c_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Câu c")
plt.show()

f2d = 8 / x**2
x0d = 2
y0d = 2
m = diff(f2d,x,1).subs(x,x0d) # Tính hệ số góc tại điểm x0
f2d_tt = m*(x - x0d) + y0d # PTTT y = m(x - x0) + y0
print("d) PTTT của f(x) = " + str(f2d) + " tại điểm x0 = " + str(x0d) + " là: ",f2d_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1d = np.arange(1, 5, 0.05)
f2d_p = 8 / x1d**2 # p = plot
f2d_tt_p = m*(x1d - x0d) + y0d
plt.plot(x1d,f2d_p)
plt.plot(x1d,f2d_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("câu d")
plt.show()

print()

f2e = x**(1/2)
x0e = 4
y0e = 2
m = diff(f2e,x,1).subs(x,x0e) # Tính hệ số góc tại điểm x0
f2e_tt = m*(x - x0e) + y0e # PTTT y = m(x - x0) + y0
print("e) PTTT của f(x) = " + str(f2e) + " tại điểm x0 = " + str(x0e) + " là: ",f2e_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1e = np.arange(0, 9, 0.1)
f2e_p = x1e**(1/2) # p = plot
f2e_tt_p = m*(x1e - x0e) + y0e
plt.plot(x1e,f2e_p)
plt.plot(x1e,f2e_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("câu e")
plt.show()
print()

f2f = x**3 + 3*x
x0f = 1
y0f = 4
m = diff(f2f,x,1).subs(x,x0f) 
f2f_tt = m*(x - x0f) + y0f
print("f) PTTT của f(x) = " + str(f2f) + " tại điểm x0 = " + str(x0f) + " là: ",f2f_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1f = np.arange(-5, 5, 0.05)
f2f_p = x1f**3 + 3*x1f
f2f_tt_p = m*(x1f - x0f) + y0f
plt.plot(x1f,f2f_p)
plt.plot(x1f,f2f_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Câu f")
plt.show()

print()

f2g = 8 / (x-2)**(1/2)
x0g = 6
y0g = 4
m = diff(f2g,x,1).subs(x,x0g) 
f2g_tt = m*(x - x0g) + y0g
print("g) PTTT của f(x) = " + str(f2g) + " tại điểm x0 = " + str(x0g) + " là: ",f2g_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1g = np.arange(4, 8, 0.05)
f2g_p = 8 / (x1g-2)**(1/2)
f2g_tt_p = m*(x1g - x0g) + y0g
plt.plot(x1g,f2g_p)
plt.plot(x1g,f2g_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Câu g")
plt.show()

print()

f2h = 1 + (4-x)**(1/2)
x0h = 3
y0h = 2
m = diff(f2h,x,1).subs(x,x0h) 
f2h_tt = m*(x - x0h) + y0h
print("h) PTTT của f(x) = " + str(f2h) + " tại điểm x0 = " + str(x0h) + " là: ",f2h_tt)

# Vẽ đồ thị hs f(x) và PTTT f(x) tại x0
x1h = np.arange(0, 4, 0.05)
f2h_p = 1 + (4-x1h)**(1/2)
f2h_tt_p = m*(x1h - x0h) + y0h
plt.plot(x1h,f2h_p)
plt.plot(x1h,f2h_tt_p)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Câu h")
plt.show()

"""Exercise 3: Find the slope of the curve at the point indicated, and then find the equation of the corresponding tangent."""

from sympy import *

x = symbols('x')

f3a = 5*x - 3*x**2
x0a = 1
df3a = diff(f3a,x,1)
m = diff(f3a,x,1).subs(x,x0a)
print("Đạo hàm bậc nhất của f(x) = " + str(f3a) + " là {}".format(df3a))
print("m = df(x=" + str(x0a) + ") : {}".format(m))
f3a_x = lambdify(x,f3a)
y0a = f3a_x(x0a)
f3a_tt = m*(x - x0a) + y0a
print("PTTT của f(x) tại (x = " + str(x0a) + "): ",f3a_tt)

print()

f3b = 1 / (x-1)
x0b = 3
df3b = diff(f3b,x,1)
m = diff(f3b,x,1).subs(x,x0b)
print("Đạo hàm bậc nhất của f(x) = " + str(f3b) + " là {}".format(df3b))
print("m = df(x=" + str(x0b) + ") : {}".format(m))
f3b_x = lambdify(x,f3b)
y0b = f3b_x(x0b)
f3b_tt = m*(x - x0b) + y0b
print("PTTT của f(x) tại (x = " + str(x0b) + "): ",f3b_tt)

print()

f3c = x**3 - 2*x + 7
x0c = -2
df3c = diff(f3c,x,1)
m = diff(f3c,x,1).subs(x,x0c)
print("Đạo hàm bậc nhất của f(x) = " + str(f3c) + " là {}".format(df3c))
print("m = df(x=" + str(x0c) + ") : {}".format(m))
f3c_x = lambdify(x,f3c)
y0c = f3c_x(x0c)
f3c_tt = m*(x - x0c) + y0c
print("PTTT của f(x) tại (x = " + str(x0c) + "): ",f3c_tt)

print()

f3d = (x-1) / (x+1)
x0d = 0
df3d = diff(f3d,x,1)
m = diff(f3d,x,1).subs(x,x0d)
print("Đạo hàm bậc nhất của f(x) = " + str(f3d) + " là {}".format(df3d))
print("m = df(x=" + str(x0d) + ") : {}".format(m))
f3d_x = lambdify(x,f3d)
y0d = f3d_x(x0d)
f3d_tt = m*(x - x0d) + y0d
print("PTTT của f(x) tại (x = " + str(x0d) + "): ",f3d_tt)

"""Exercise 4: Find the derivative of function y = −2x^2/3 + x at x = 0 by the definition"""

from sympy import *
x = symbols('x', real = True)

x0 = 0
f4 = (-2*x**2/3 + x - 0) / (x - x0)
lim_f4 = limit(f4, x, 0)
print("Giá trị lim (-2*x**2/3 + x - 0) / (x - x0); khi x->0 là m = {}".format(lim_f4))

"""Exercise 5: Using the definition formula of derivatives f to find the values of the derivatives as specified"""

from sympy import *

x = symbols('x', real = True)

f5a = 4 - x**2 
df5a = diff(f5a,x,1)
x1 = -3
x2 = 0
x3= 1
m1 = diff(f5a,x,1).subs(x,x1)
m2 = diff(f5a,x,1).subs(x,x2)
m3 = diff(f5a,x,1).subs(x,x3)
print("Đạo hàm bậc nhất của f(x) = {}".format(df5a))
print("df(x = " + str(x1) + ") = {}".format(m1))
print("df(x = " + str(x2) + ") = {}".format(m2))
print("df(x = " + str(x3) + ") = {}".format(m3))

print()

f5b = (x-1)**2 + 1
df5b = diff(f5b,x,1)
x1 = -1
x2 = 0
x3= 2
m1 = diff(f5b,x,1).subs(x,x1)
m2 = diff(f5b,x,1).subs(x,x2)
m3 = diff(f5b,x,1).subs(x,x3)
print("Đạo hàm bậc nhất của f(x) = {}".format(df5b))
print("df(x = " + str(x1) + ") = {}".format(m1))
print("df(x = " + str(x2) + ") = {}".format(m2))
print("df(x = " + str(x3) + ") = {}".format(m3))

print()

f5c = 1 / x**2
df5c = diff(f5c,x,1)
x1 = -1
x2 = 2
x3= sqrt(3)
m1 = diff(f5c,x,1).subs(x,x1)
m2 = diff(f5c,x,1).subs(x,x2)
m3 = diff(f5c,x,1).subs(x,x3)
print("Đạo hàm bậc nhất của f(x) = {}".format(df5c))
print("df(x = " + str(x1) + ") = {}".format(m1))
print("df(x = " + str(x2) + ") = {}".format(m2))
print("df(x = " + str(x3) + ") = {}".format(m3))

print()

f5d = (1-x) / 2*x
df5d = diff(f5d,x,1)
x1 = -1
x2 = 1
x3= sqrt(2)
m1 = diff(f5d,x,1).subs(x,x1)
m2 = diff(f5d,x,1).subs(x,x2)
m3 = diff(f5d,x,1).subs(x,x3)
print("Đạo hàm bậc nhất của f(x) = {}".format(df5d))
print("df(x = " + str(x1) + ") = {}".format(m1))
print("df(x = " + str(x2) + ") = {}".format(m2))
print("df(x = " + str(x3) + ") = {}".format(m3))

"""Exercise 6: Use the formula below to find the derivative of the functions below:"""

from sympy import *

x = symbols('x')
z = symbols('z')

f6a = (1 / (z+2) - 1 / (x+2)) / (z - x)
lim_f6a = limit(f6a, z, x)
print("a) The result is {}".format(lim_f6a))

f6b = (z**2 - 3*z + 4 - (x**2 - 3*x + 4)) / (z-x)
lim_f6b = limit(f6b, z, x)
print("b) The result is {}".format(lim_f6b))

f6c = (z / (z-1) - x / (x-1)) / (z - x)
lim_f6c = limit(f6c, z, x)
print("c) The result is {}".format(lim_f6c))

f6d = (1 + z**(1/2) - (1 + x**(1/2))) / (z-x)
lim_f6d = limit(f6d, z, x)
print("d) The result is {}".format(lim_f6d))

"""Exercise 7: Write a computer program to perform the following steps"""

from sympy import *
from matplotlib import pyplot as plt
import numpy as np
import math

x = symbols('x', real = True)
h = symbols('h', real = True)

f7a = x**3 + 2*x
f7a_x = lambdify(x,f7a)
x0 = 0

f7a_q = (f7a_x(x0 + h) - f7a_x(x0)) / h
f7a_qh = lambdify(h,f7a_q)

q0 = limit(f7a_q,h,0)

q1 = limit(f7a_q,h,1)
q2 = limit(f7a_q,h,2)
q3 = limit(f7a_q,h,3)

x1 = np.arange(x0 - 1/2, x0 + 3, 0.05)
y = x1**3 + 2*x1

f7a_y1 = float(q1) * (x - x0) + x0**3 + 2*x0
f7a_y2 = float(q2) * (x - x0) + x0**3 + 2*x0
f7a_y3 = float(q3) * (x - x0) + x0**3 + 2*x0

f7a_y1p = lambdify(x,f7a_y1)
f7a_y2p = lambdify(x,f7a_y2)
f7a_y3p = lambdify(x,f7a_y3)

plt.plot(x1,y)
plt.plot(x1,f7a_y1p(x1))
plt.plot(x1,f7a_y2p(x1))
plt.plot(x1,f7a_y3p(x1))
plt.show()

print()

f7b = x + 5 / x
f7b_x = lambdify(x,f7b)
x0 = 1

f7b_q = (f7b_x(x0 + h) - f7b_x(x0)) / h
f7b_qh = lambdify(h,f7b_q)

q0 = limit(f7b_q,h,0)

q1 = limit(f7b_q,h,1)
q2 = limit(f7b_q,h,2)
q3 = limit(f7b_q,h,3)

x1 = np.arange(x0 - 1/2, x0 + 3, 0.05)
y = x1 + 5 / x1

f7b_y1 = float(q1) * (x - x0) + x0 + 5 / x0
f7b_y2 = float(q2) * (x - x0) + x0 + 5 / x0
f7b_y3 = float(q3) * (x - x0) + x0 + 5 / x0

f7b_y1p = lambdify(x,f7b_y1)
f7b_y2p = lambdify(x,f7b_y2)
f7b_y3p = lambdify(x,f7b_y3)

plt.plot(x1,y)
plt.plot(x1,f7b_y1p(x1))
plt.plot(x1,f7b_y2p(x1))
plt.plot(x1,f7b_y3p(x1))
plt.show()

print()

f7c = x + sin(2*x)
x0 = math.pi / 2

f7c_q = (x0 + h + sin(2*(x0+h)) - (x0 + sin(2*x0))) / h
f7c_qh = lambdify(h,f7c_q)

q0 = limit(f7c_q,h,0)

q1 = limit(f7c_q,h,1)
q2 = limit(f7c_q,h,2)
q3 = limit(f7c_q,h,3)

x1 = np.arange(x0 - 1/2, x0 + 3, 0.05)
y = x1 + np.sin(2*x1)

f7c_y1 = float(q1) * (x - x0) + x0 + sin(2*x0)
f7c_y2 = float(q2) * (x - x0) + x0 + sin(2*x0)
f7c_y3 = float(q3) * (x - x0) + x0 + sin(2*x0)

f7c_y1p = lambdify(x,f7c_y1)
f7c_y2p = lambdify(x,f7c_y2)
f7c_y3p = lambdify(x,f7c_y3)

plt.plot(x1,y)
plt.plot(x1,f7c_y1p(x1))
plt.plot(x1,f7c_y2p(x1))
plt.plot(x1,f7c_y3p(x1))
plt.show()

print()

f7d = cos(x) + 4 * sin(2*x)
x0 = math.pi 

f7d_q = (cos(x0+h) + 4 * sin(2*(x0+h)) - (cos(x0) + 4 * sin(2*x0))) / h
f7d_qh = lambdify(h,f7d_q)

q0 = limit(f7d_q,h,0)

q1 = limit(f7d_q,h,1)
q2 = limit(f7d_q,h,2)
q3 = limit(f7d_q,h,3)

x1 = np.arange(x0 - 1/2, x0 + 3, 0.05)
y = np.cos(x1) + 4 * np.sin(2*x1)

f7d_y1 = (q1) * (x - x0) + cos(x0) + 4 * sin(2*x0)
f7d_y2 = (q2) * (x - x0) + cos(x0) + 4 * sin(2*x0)
f7d_y3 = (q3) * (x - x0) + cos(x0) + 4 * sin(2*x0)

f7d_y1p = lambdify(x,f7d_y1)
f7d_y2p = lambdify(x,f7d_y2)
f7d_y3p = lambdify(x,f7d_y3)

plt.plot(x1,y)
plt.plot(x1,f7d_y1p(x1))
plt.plot(x1,f7d_y2p(x1))
plt.plot(x1,f7d_y3p(x1))
plt.show()

"""Exercise 8: Given f(x) = x3 − 3x + 1 (C). Find the tangent line of (C) in the cases:"""

from sympy import *

x = symbols('x', real = True)

f8 = x**3 - 3*x + 1
f8_x = lambdify(x, f8)
df8 = diff(f8,x,1)
print("Đạo hàm bậc nhất của f(x) = {}".format(df8))

x_a = 3
y_a = f8_x(x_a)
m_a = diff(f8,x,1).subs(x,x_a)
y_tangentline_a = m_a * (x - x_a) + y_a
print("a) PTTT của f(x) tại (x = " + str(x_a) + "): ",y_tangentline_a)

k = 9 
xb = solve(df8 - k)
for x_b in xb:
  y_b = f8_x(x_b)
  y_tangentline_b = k * (x - x_b) + y_b
  print("b) PTTT của f(x) tại (x = " + str(x_b) + "): ",y_tangentline_b)

x_c= 2/3
y_c = -1
m_c = diff(f8,x,1).subs(x,x_c)
y_tangentline_c = m_c * (x - x_c) + y_c
print("c) PTTT của f(x) tại (x = " + str(x_c) + "): ",y_tangentline_c)