# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13xnXDA6aFLleoGaIDkO2JWPvJ4Oh0CCJ

Exercise 1: Write a computer program to find the limit of functions
"""

from sympy import *
import math

x = symbols('x', real = True)

f1a = abs(x**2 - x - 7)
limf1a = limit(f1a, x, 3)
print("a) Limit of f1a is {}".format(limf1a))

f1b = abs(x-1) / (x**2-1)
limf1b = limit(f1b, x, 1)
print("b) Limit of f1b is {}".format(limf1b))

f1c = math.e**(1/x)
limf1c = limit(f1c, x, 1)
print("c) Limit of f1c is {}".format(limf1c))

f1d = (x**4-16) / (x-2)
limf1d = limit(f1d, x, 2)
print("d) Limit of f1d is {}".format(limf1d))

f1e = (x**3 - x**2 - 5*x - 3) / ((x+1)**2)
limf1e = limit(f1e, x, -1)
print("e) Limit of f1e is {}".format(limf1e))

f1f = (x**2 - 9) / ((x**2 + 7)**(1/2) - 4)
limf1f = limit(f1f, x, 3)
print("f) Limit of f1f is {}".format(limf1f))

f1g = abs(x) / sin(x)
limf1g = limit(f1g, x, 1)
print("g) Limit of f1g is {}".format(limf1g))

f1h = (1-cos(x)) / (x*sin(x))
limf1h = limit(f1h, x, 0)
print("h) Limit of f1h is {}".format(limf1h))

f1i = (2 * x**2) / (3 - 3 * cos(x))
limf1i = limit(f1i, x, 0)
print("i) Limit of f1i is {}".format(limf1i))

f1j = ( (3+x) / (-1+x) )**x 
limf1j = limit(f1j, x, math.inf)
print("j) Limit of f1j is {}".format(limf1j))

f1k = (1 - 2 / (3+x))**x 
limf1k = limit(f1k, x, math.inf)
print("k) Limit of f1k is {}".format(limf1k))

f1l = (1/x)**(1/x)
limf1l = limit(f1l, x, math.inf)
print("l) Limit of f1l is {}".format(limf1l))

f1m = (-pow(x,1/3)+pow(1+x,1/3))/(-pow(x,1/2)-pow(1+x,1/2))
limf1m = limit(f1m, x, math.inf)
print("m) Limit of f1m is {}".format(limf1m))

f1n = factorial(x) / x**x
limf1n = limit(f1n, x, math.inf)
print("n) Limit of f1n is {}".format(limf1n))

"""Exercise 2: Graph the functions which were defined in the previous exercise, and then show the limit
points on the graph if possible
"""

from matplotlib import pyplot as plt
import numpy as np
from sympy import *
import math
from scipy.special import gamma

x = symbols('x', real = True)

value = np.arange(0, 3, 0.05)

f2a = abs(x**2 - x - 7)
f2a_x = lambdify(x, f2a, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("a) abs(x**2 - x - 7)")
plt.plot(value,f2a_x)
plt.show()

print()

value = np.arange(-0.5,1.5,0.05)

f2b = abs(x-1) / (x**2-1) 
f2b_x = lambdify(x, f2b, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("b) abs(x-1) / (x**2-1)")
plt.plot(value,f2b_x)
plt.show()

print()

value = np.arange(0.5,1.05,0.05)

f2c = math.e**(1/x)
f2c_x = lambdify(x, f2c, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("c) e**(1/x)")
plt.plot(value,f2c_x)
plt.show()

print()

value = np.arange(0,2,0.05)

f2d = (x**4-16) / (x-2)
f2d_x = lambdify(x, f2d, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("d) (x**4-16) / (x-2)")
plt.plot(value,f2d_x)
plt.show()

print()

value = np.arange(-2,-1,0.05)

f2e = (x**3 - x**2 - 5*x - 3) / ((x+1)**2)
f2e_x = lambdify(x, f2e, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("e) (x**3 - x**2 - 5*x - 3) / ((x+1)**2)")
plt.plot(value,f2e_x)
plt.show()

print()

value = np.arange(0,3,0.05)

f2f = (x**2 - 9) / ((x**2 + 7)**(1/2) - 4)
f2f_x = lambdify(x, f2f, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("f) (x**2 - 9) / ((x**2 + 7)**(1/2) - 4)")
plt.plot(value,f2f_x)
plt.show()

print()

value = np.arange(0.05,1,0.05)

f2g = abs(x) / sin(x)
f2g_x = lambdify(x, f2g, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("g) abs(x) / sin(x)")
plt.plot(value,f2g_x)
plt.show()

print()

value = np.arange(-1,0,0.05)

f2h = (1-cos(x)) / (x*sin(x))
f2h_x = lambdify(x, f2h, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("h) (1-cos(x)) / (x*sin(x))")
plt.plot(value,f2h_x)
plt.show()

print()

value = np.arange(-1,0,0.05)

f2i = (2 * x**2) / (3 - 3 * cos(x))
f2i_x = lambdify(x, f2i, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("i) (2 * x**2) / (3 - 3 * cos(x))")
plt.plot(value,f2i_x)
plt.show()

print()

value = np.arange(2,10000,1)

f2j = ( (3+x) / (-1+x) )**x 
f2j_x = lambdify(x, f2j, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("j) ( (3+x) / (-1+x) )**x")
plt.plot(value,f2j_x)
plt.show()

print()

value = np.arange(0,10000,1)

f2k = (1 - 2 / (3+x))**x 
f2k_x = lambdify(x, f2k, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("k) (1 - 2 / (3+x))**x")
plt.plot(value,f2k_x)
plt.show()

print()

value = np.arange(2,10000,1)

f2l = (1/x)**(1/x)
f2l_x = lambdify(x, f2l, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("l) (1/x)**(1/x)")
plt.plot(value,f2l_x)
plt.show()

print()

value = np.arange(2,10000,1)

f2m = (-pow(x,1/3)+pow((1+x),1/3))/(-pow(x,1/2)+pow((1+x),1/2))
f2m_x = lambdify(x, f2m, "numpy")(value)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("m) (-pow(x,1/3)+pow((1+x),1/3))/(-pow(x,1/2)+pow((1+x),1/2))")
plt.plot(value,f2m_x)
plt.show()

print()

x = np.linspace(0,10,1000)
plt.plot(x,gamma(x+1) / x**x)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("n) factorial(x) / x**x")
plt.show()

"""Exercise 3: """

from sympy import *
from matplotlib import pyplot as plt
import numpy as np

x = symbols('x')

value = np.arange(-4, 4, 0.05)

f3a = 1 / (1 + 2 ** (1/x))

f3a_x = lambdify(x, f3a, "numpy")(value)

f3a_lm = limit(f3a, x, 0)
print("a) Lim of function at x = 0 is ",f3a_lm)

f3a_lr = limit(f3a, x, 0, '+')
print("a) Lim of function at x = 0+ is ",f3a_lr)

f3a_ll = limit(f3a, x, 0, '-')
print("a) Lim of function at x = 0- is ",f3a_ll)

if f3a_lm == f3a_lr and f3a_lm == f3a_ll:
  print("a) The function is continuous at 0")
  plt.xlabel("x-axis")
  plt.ylabel("y-axis")
  plt.plot(value, f3a_x, color='blue')
  plt.title("a) f = 1 / (1 + 2 ** (1/x))")
  plt.show()
else:
  print("a) The function isn't continuous at 0")
  plt.xlabel("x-axis")
  plt.ylabel("y-axis")
  plt.plot(value, f3a_x, color='blue')
  plt.title("a) f = 1 / (1 + 2 ** (1/x))")
  plt.show()

print()

f3b = (x**2 + x) / (x**3 + x**2)**(1/2)

f3b_x = lambdify(x, f3b, "numpy")(value)

f3b_lm = limit(f3b, x, 0)
print("b) Lim of function at x = 0 is ",f3b_lm)

f3b_lr = limit(f3b, x, 0, '+')
print("b) Lim of function at x = 0+ is ",f3b_lr)

f3b_ll = limit(f3b, x, 0, '-')
print("b) Lim of function at x = 0- is ",f3b_ll)

if f3b_lm == f3b_lr and f3b_lm == f3b_ll:
  print("b) The function is continuous at 0")
  plt.xlabel("x-axis")
  plt.ylabel("y-axis")
  plt.plot(value, f3b_x, color='red')
  plt.title("b) f = (x**2 + x) / (x**3 + x**2)**(1/2)")
  plt.show()
else:
  print("b) The function isn't continuous at 0")
  plt.xlabel("x-axis")
  plt.ylabel("y-axis")
  plt.plot(value, f3b_x, color='red')
  plt.title("b) f = (x**2 + x) / (x**3 + x**2)**(1/2)")
  plt.show()

print()

"""Exercise 4:"""

from sympy import *

x = symbols('x', real = True)

f4 = sin(1/x) 
lm = limit(0, x, 0)
lml = limit(0, x, 0, '-')
lmr = limit(f4, x, 0, '+')
print("The limit of f(x) at x = 0 is {}".format(lm))
print("The limit of f(x) at x = 0+ is {}".format(lmr))
print("The limit of f(x) at x = 0- is {}".format(lml))

"""Exercise 5: Prove that the function is continuous at c"""

from sympy import *

x = symbols('x')

f5a = x**2 - 7
c = 1
f5a_lm = limit(f5a, x, c)
f5a_lr = limit(f5a, x, c, '+')
f5a_ll = limit(f5a, x, c, '-')

if f5a_lm == f5a_lr and f5a_lm == f5a_ll:
  print("a) The function is continuous at 1")
else:
  print("a) The function isn't continuous at 1")

print()

f5b = (2*x - 3)**(1/2)
c = 2
f5b_lm = limit(f5b, x, c)
f5b_lr = limit(f5b, x, c, '+')
f5b_ll = limit(f5b, x, c,  '-')

if f5b_lm == f5b_lr and f5b_lm == f5b_ll:
  print("b) The function is continuous at 2")
else:
  print("b) The function isn't continuous at 2")

"""Exercise 6: Write a program computer to verify at what points are the functions following continuous?

"""

from sympy import *

x = symbols('x', real = True)

f6a = (x**2 - x - 6) / (x-3)

f6a_lr = limit(f6a, x, 0, '+')
f6a_ll = limit(f6a, x, 0, '-')

if f6a_lr == 5 and f6a_ll == 5:
  print("a) The function is continuous at 0")
else:
  print("a) The function isn't continuous at 0")

print()


f6b = (x**3 - 8) / (x**2 - 4)

f6b_lr_2 = limit(f6b, x, 2, '+')
f6b_ll_2 = limit(f6b, x, 2, '-')
f6b_lr_minus2 = limit(f6b, x, -2, '+')
f6b_ll_minus2 = limit(f6b, x, -2, '-')

if f6b_lr_2 == 3 and f6b_ll_2 == 3:
  print("b) The function is continuous at 2")
else:
  print("b) The function isn't continuous at 2")

if f6b_lr_minus2 == 4 and f6b_ll_minus2 == 4:
  print("b) The function is continuous at -2")
else:
  print("b) The function isn't continuous at -2")

print()

f6c = (x**2 - x - 2) / (x-2)

f6c_lr = limit(f6c, x, 2, '+')
f6c_ll = limit(f6c, x, 2, '-')

if f6c_lr == 1 and f6c_ll == 1:
  print("c) The function is continuous at 2")
else:
  print("c) The function isn't continuous at 2")

print()

f6d = 1 / x**2

f6d_lr = limit(f6d, x, 0, '+')
f6d_ll = limit(f6d, x, 0, '-')

if f6d_lr == 1 and f6d_ll == 1:
  print("d) The function is continuous at 0")
else:
  print("d) The function isn't continuous at 0")

"""Exercise 7: Write a program computer to verify where are each of the following functions discontinuous?

"""

from sympy import *

x = symbols('x', real = True)

f7a = (x**2 - x - 2) / (x-2)
f7a_lm = limit(f7a,x,2)
f7a_lr = limit(f7a,x,2,'+')
f7a_ll = limit(f7a,x,2,'-')
if f7a_lm == f7a_lr and f7a_lm == f7a_ll:
  print("1) The function is continuous at x = 2")
else:
  print("1) The function isn't continuous at x = 2")

print()

f7b = (x**2 - 2*x - 3) / (2*x-6)
f7b_lm = limit(f7b,x,3)
f7b_lr = limit(f7b,x,3,'+')
f7b_ll = limit(f7b,x,3,'-')
if f7b_lm == f7b_lr and f7b_lm == f7b_ll:
  print("2) The function is continuous at x = 3")
else:
  print("2) The function isn't continuous at x = 3")

"""Exercise 8: Write a program computer to verify that the function f(x) = 1 − sqrt(1-x**2) is continuous on
the interval [−1; 1] or not
"""

from sympy import *

x = symbols('x', real = True)

f8 = 1 - (1 - x**2)**(1/2)

f8_lim_minus1 = limit(f8, x, -1)

f8_lim_1 = limit(f8, x, 1)

if f8_lim_minus1 == f8_lim_1:
  print("The function f(x) = 1 − sqrt(1-x**2) is continuous on the interval [−1; 1]")
else:
  print("The function f(x) = 1 − sqrt(1-x**2) isn't continuous on the interval [−1; 1]")

"""Exercise 9: Given P(1, 0) lies on y = sin(10π/x). Q has (x; sin(10π/x)), finding slope of secant PQ with
x = 2, 1.5, 1.4, 1.3, 1.2, 1.1, 0.5, 0.6, 0.7, 0.8, 0.9. Write a computer program to show the result.
"""

import numpy as np
from sympy import *

list_x = np.array([2, 1.5, 1.4, 1.3, 1.2, 1.1, 0.5, 0.6, 0.7, 0.8, 0.9])
x1 = 1
y1 = 0
for x2 in list_x:
  y2 = sin(10*pi/x2)
  print("Coordinates of point Q:",x2,y2)
  k = (y2 - y1) / (x2 - x1)
  print("Slope is ",k)

"""Exercise 10: Define L so that the functions are continuous"""

from sympy import *

x = symbols('x')

f10a = sin(x) / x

f10a_lr = limit(f10a, x, 0, '+')
f10a_ll = limit(f10a, x, 0, '-')

if f10a_lr == f10a_ll:
  L = f10a_lr
  print("a) L = {}".format(L))
else:
  print("Can't find L")

print()

f10b = (x**2 + x - 6) / (x**2 - 4)

f10b_lr = limit(f10b, x, 2, '+')
f10b_ll = limit(f10b, x, 2, '-')

if f10b_lr == f10b_ll:
  L = f10b_ll
  print("b) L = {}".format(L))
else:
  print("Can't find L")